# Generated by Django 5.2.7 on 2025-10-10 14:17

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Event title', max_length=200)),
                ('description', models.TextField(help_text='Detailed event description')),
                ('venue', models.CharField(help_text='Venue name', max_length=200)),
                ('address', models.TextField(help_text='Full venue address')),
                ('category', models.CharField(choices=[('concert', 'Concert'), ('theater', 'Theater'), ('sports', 'Sports'), ('conference', 'Conference'), ('workshop', 'Workshop'), ('festival', 'Festival'), ('comedy', 'Comedy'), ('other', 'Other')], default='other', help_text='Event category', max_length=50)),
                ('start_datetime', models.DateTimeField(help_text='Event start date and time')),
                ('end_datetime', models.DateTimeField(help_text='Event end date and time')),
                ('media', models.JSONField(blank=True, default=list, help_text='List of media URLs (images, videos)')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='draft', help_text='Event status', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the event is active and visible')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(help_text='Event owner (must have event_owner role)', on_delete=django.db.models.deletion.CASCADE, related_name='owned_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'db_table': 'events',
                'ordering': ['-start_datetime'],
            },
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Discount name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Discount description')),
                ('discount_type', models.CharField(choices=[('percentage', 'Percentage'), ('fixed_amount', 'Fixed Amount')], help_text='Type of discount', max_length=20)),
                ('discount_value', models.DecimalField(decimal_places=2, help_text='Discount value (percentage or fixed amount)', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('category', models.CharField(choices=[('promo_code', 'Promo Code'), ('early_bird', 'Early Bird'), ('group', 'Group Discount'), ('student', 'Student Discount'), ('senior', 'Senior Discount')], help_text='Discount category', max_length=20)),
                ('promo_code', models.CharField(blank=True, help_text='Promo code for discount (if applicable)', max_length=50, null=True)),
                ('max_uses', models.PositiveIntegerField(blank=True, help_text='Maximum number of times this discount can be used', null=True)),
                ('current_uses', models.PositiveIntegerField(default=0, help_text='Current number of times this discount has been used')),
                ('valid_from', models.DateTimeField(help_text='Discount valid from')),
                ('valid_until', models.DateTimeField(help_text='Discount valid until')),
                ('is_active', models.BooleanField(default=True, help_text='Whether discount is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(help_text='Associated event', on_delete=django.db.models.deletion.CASCADE, related_name='discounts', to='events.event')),
            ],
            options={
                'verbose_name': 'Discount',
                'verbose_name_plural': 'Discounts',
                'db_table': 'discounts',
            },
        ),
        migrations.CreateModel(
            name='TicketType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Ticket type name (e.g., VIP, General, Student)', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Detailed description of what this ticket type includes')),
                ('price', models.DecimalField(decimal_places=2, help_text='Ticket price', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('quantity_available', models.PositiveIntegerField(help_text='Total number of tickets available for this type', validators=[django.core.validators.MinValueValidator(1)])),
                ('quantity_sold', models.PositiveIntegerField(default=0, help_text='Number of tickets sold for this type')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this ticket type is available for purchase')),
                ('sale_start_datetime', models.DateTimeField(blank=True, help_text='When ticket sales start (optional)', null=True)),
                ('sale_end_datetime', models.DateTimeField(blank=True, help_text='When ticket sales end (optional)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(help_text='Associated event', on_delete=django.db.models.deletion.CASCADE, related_name='ticket_types', to='events.event')),
            ],
            options={
                'verbose_name': 'Ticket Type',
                'verbose_name_plural': 'Ticket Types',
                'db_table': 'ticket_types',
                'ordering': ['price'],
            },
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['start_datetime', 'end_datetime'], name='events_start_d_c4a32d_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['category'], name='events_categor_a7129c_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['status'], name='events_status_8890b6_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['owner'], name='events_owner_i_97f353_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['is_active'], name='events_is_acti_45ba60_idx'),
        ),
        migrations.AddIndex(
            model_name='discount',
            index=models.Index(fields=['event'], name='discounts_event_i_0a8d33_idx'),
        ),
        migrations.AddIndex(
            model_name='discount',
            index=models.Index(fields=['promo_code'], name='discounts_promo_c_cad902_idx'),
        ),
        migrations.AddIndex(
            model_name='discount',
            index=models.Index(fields=['valid_from', 'valid_until'], name='discounts_valid_f_9cc1e8_idx'),
        ),
        migrations.AddIndex(
            model_name='discount',
            index=models.Index(fields=['is_active'], name='discounts_is_acti_49deb3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='discount',
            unique_together={('event', 'promo_code')},
        ),
        migrations.AddIndex(
            model_name='tickettype',
            index=models.Index(fields=['event'], name='ticket_type_event_i_802d9e_idx'),
        ),
        migrations.AddIndex(
            model_name='tickettype',
            index=models.Index(fields=['is_active'], name='ticket_type_is_acti_9178fb_idx'),
        ),
        migrations.AddIndex(
            model_name='tickettype',
            index=models.Index(fields=['price'], name='ticket_type_price_eef9cd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tickettype',
            unique_together={('event', 'name')},
        ),
    ]
