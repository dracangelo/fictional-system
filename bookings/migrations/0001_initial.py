# Generated by Django 5.2.7 on 2025-10-10 14:17

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('events', '0001_initial'),
        ('theaters', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_type', models.CharField(choices=[('event', 'Event Booking'), ('movie', 'Movie Booking')], help_text='Type of booking (event or movie)', max_length=20)),
                ('booking_reference', models.CharField(help_text='Unique booking reference number', max_length=20, unique=True)),
                ('subtotal', models.DecimalField(decimal_places=2, help_text='Subtotal before discounts and fees', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total discount applied', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('fees', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Additional fees (processing, service, etc.)', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Final total amount', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('partially_refunded', 'Partially Refunded')], default='pending', help_text='Payment processing status', max_length=20)),
                ('booking_status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed'), ('no_show', 'No Show')], default='pending', help_text='Overall booking status', max_length=20)),
                ('payment_method', models.CharField(blank=True, help_text='Payment method used', max_length=50)),
                ('payment_transaction_id', models.CharField(blank=True, help_text='External payment transaction ID', max_length=100)),
                ('customer_email', models.EmailField(help_text='Customer email for notifications', max_length=254)),
                ('customer_phone', models.CharField(blank=True, help_text='Customer phone number', max_length=20)),
                ('special_requests', models.TextField(blank=True, help_text='Any special requests or notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('applied_discount', models.ForeignKey(blank=True, help_text='Discount applied to this booking', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bookings', to='events.discount')),
                ('customer', models.ForeignKey(help_text='Customer who made the booking', on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(blank=True, help_text='Associated event (for event bookings)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='events.event')),
                ('showtime', models.ForeignKey(blank=True, help_text='Associated showtime (for movie bookings)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='theaters.showtime')),
            ],
            options={
                'verbose_name': 'Booking',
                'verbose_name_plural': 'Bookings',
                'db_table': 'bookings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seat_number', models.CharField(blank=True, help_text='Seat number/identifier (for movie bookings)', max_length=10)),
                ('ticket_number', models.CharField(help_text='Unique ticket number', max_length=50, unique=True)),
                ('qr_code_data', models.TextField(help_text='QR code data for ticket validation')),
                ('qr_code_image', models.TextField(blank=True, help_text='Base64 encoded QR code image')),
                ('price', models.DecimalField(decimal_places=2, help_text='Individual ticket price', max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('status', models.CharField(choices=[('valid', 'Valid'), ('used', 'Used'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='valid', help_text='Ticket status', max_length=20)),
                ('used_at', models.DateTimeField(blank=True, help_text='When the ticket was used/scanned', null=True)),
                ('used_by', models.CharField(blank=True, help_text='Who scanned/validated the ticket', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking', models.ForeignKey(help_text='Associated booking', on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='bookings.booking')),
                ('ticket_type', models.ForeignKey(blank=True, help_text='Ticket type (for event bookings)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='events.tickettype')),
            ],
            options={
                'verbose_name': 'Ticket',
                'verbose_name_plural': 'Tickets',
                'db_table': 'tickets',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['customer'], name='bookings_custome_59c648_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['booking_reference'], name='bookings_booking_4d53ac_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['booking_type'], name='bookings_booking_0b59a7_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['payment_status'], name='bookings_payment_3ea9ef_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['booking_status'], name='bookings_booking_ab1f8c_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['event'], name='bookings_event_i_d1c541_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['showtime'], name='bookings_showtim_35a66d_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['created_at'], name='bookings_created_118d3e_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['booking'], name='tickets_booking_98f7e3_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['ticket_number'], name='tickets_ticket__4c9624_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['status'], name='tickets_status_fbbf05_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['ticket_type'], name='tickets_ticket__eed111_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['seat_number'], name='tickets_seat_nu_7e5faa_idx'),
        ),
    ]
