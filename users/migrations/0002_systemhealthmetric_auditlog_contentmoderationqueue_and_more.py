# Generated by Django 5.2.7 on 2025-10-13 09:22

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('users', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SystemHealthMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('database', 'Database Performance'), ('api_response', 'API Response Time'), ('memory_usage', 'Memory Usage'), ('cpu_usage', 'CPU Usage'), ('disk_usage', 'Disk Usage'), ('active_users', 'Active Users'), ('concurrent_bookings', 'Concurrent Bookings'), ('error_rate', 'Error Rate'), ('payment_success_rate', 'Payment Success Rate'), ('notification_delivery', 'Notification Delivery')], help_text='Type of metric being tracked', max_length=30)),
                ('metric_name', models.CharField(help_text='Specific name of the metric', max_length=100)),
                ('value', models.FloatField(help_text='Current metric value')),
                ('unit', models.CharField(blank=True, help_text='Unit of measurement (ms, %, MB, etc.)', max_length=20)),
                ('warning_threshold', models.FloatField(blank=True, help_text='Warning threshold value', null=True)),
                ('critical_threshold', models.FloatField(blank=True, help_text='Critical threshold value', null=True)),
                ('status', models.CharField(choices=[('healthy', 'Healthy'), ('warning', 'Warning'), ('critical', 'Critical'), ('down', 'Down')], default='healthy', help_text='Current status based on thresholds', max_length=10)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metric metadata')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the metric was recorded')),
            ],
            options={
                'verbose_name': 'System Health Metric',
                'verbose_name_plural': 'System Health Metrics',
                'db_table': 'system_health_metrics',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['metric_type'], name='system_heal_metric__59a7e0_idx'), models.Index(fields=['metric_name'], name='system_heal_metric__a501ff_idx'), models.Index(fields=['status'], name='system_heal_status_9b76f5_idx'), models.Index(fields=['timestamp'], name='system_heal_timesta_cc1417_idx')],
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('login', 'Login'), ('logout', 'Logout'), ('permission_change', 'Permission Change'), ('status_change', 'Status Change'), ('payment', 'Payment'), ('booking', 'Booking'), ('cancellation', 'Cancellation'), ('moderation', 'Content Moderation'), ('system', 'System Action')], help_text='Type of action performed', max_length=20)),
                ('action_description', models.TextField(help_text='Detailed description of the action')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address from which action was performed', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string')),
                ('session_key', models.CharField(blank=True, help_text='Session key', max_length=40)),
                ('old_values', models.JSONField(blank=True, default=dict, help_text='Previous values before the action')),
                ('new_values', models.JSONField(blank=True, default=dict, help_text='New values after the action')),
                ('additional_data', models.JSONField(blank=True, default=dict, help_text='Additional context data')),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='low', help_text='Severity level of the action', max_length=10)),
                ('is_successful', models.BooleanField(default=True, help_text='Whether the action was successful')),
                ('error_message', models.TextField(blank=True, help_text='Error message if action failed')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the action occurred')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(blank=True, help_text='User who performed the action', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
                'db_table': 'audit_logs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user'], name='audit_logs_user_id_73c422_idx'), models.Index(fields=['action_type'], name='audit_logs_action__168beb_idx'), models.Index(fields=['timestamp'], name='audit_logs_timesta_423be6_idx'), models.Index(fields=['severity'], name='audit_logs_severit_fc52cc_idx'), models.Index(fields=['content_type', 'object_id'], name='audit_logs_content_b0ef47_idx'), models.Index(fields=['ip_address'], name='audit_logs_ip_addr_919cb4_idx')],
            },
        ),
        migrations.CreateModel(
            name='ContentModerationQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(help_text='ID of the content object')),
                ('content_category', models.CharField(choices=[('event', 'Event'), ('movie', 'Movie'), ('review', 'Customer Review'), ('user_profile', 'User Profile')], help_text='Category of content', max_length=20)),
                ('content_title', models.CharField(help_text='Title or name of the content', max_length=200)),
                ('content_description', models.TextField(blank=True, help_text='Description or excerpt of the content')),
                ('submitted_at', models.DateTimeField(auto_now_add=True, help_text='When the content was submitted')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('flagged', 'Flagged for Review'), ('auto_approved', 'Auto Approved')], default='pending', help_text='Current moderation status', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', help_text='Priority level for moderation', max_length=10)),
                ('moderated_at', models.DateTimeField(blank=True, help_text='When the content was moderated', null=True)),
                ('moderation_notes', models.TextField(blank=True, help_text='Notes from the moderator')),
                ('flagged_reasons', models.JSONField(blank=True, default=list, help_text='Reasons why content was flagged')),
                ('auto_moderation_score', models.FloatField(blank=True, help_text='Automated moderation score (0-1)', null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content_type', models.ForeignKey(help_text='Type of content being moderated', on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('moderator', models.ForeignKey(blank=True, help_text='Admin who moderated the content', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_content', to=settings.AUTH_USER_MODEL)),
                ('submitted_by', models.ForeignKey(help_text='User who submitted the content', on_delete=django.db.models.deletion.CASCADE, related_name='submitted_content', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Content Moderation Queue',
                'verbose_name_plural': 'Content Moderation Queue',
                'db_table': 'content_moderation_queue',
                'ordering': ['-priority', '-submitted_at'],
                'indexes': [models.Index(fields=['status'], name='content_mod_status_0cd257_idx'), models.Index(fields=['priority'], name='content_mod_priorit_767ad4_idx'), models.Index(fields=['submitted_by'], name='content_mod_submitt_2c6852_idx'), models.Index(fields=['moderator'], name='content_mod_moderat_fcabf2_idx'), models.Index(fields=['content_category'], name='content_mod_content_cc5830_idx'), models.Index(fields=['submitted_at'], name='content_mod_submitt_8cd114_idx'), models.Index(fields=['content_type', 'object_id'], name='content_mod_content_6cdb87_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_category', models.CharField(choices=[('authentication', 'Authentication'), ('booking', 'Booking'), ('search', 'Search'), ('profile', 'Profile Management'), ('content', 'Content Management'), ('payment', 'Payment'), ('notification', 'Notification'), ('api', 'API Access')], help_text='Category of action', max_length=20)),
                ('action_name', models.CharField(help_text='Specific action name', max_length=100)),
                ('action_details', models.JSONField(blank=True, default=dict, help_text='Additional action details')),
                ('endpoint', models.CharField(blank=True, help_text='API endpoint accessed', max_length=200)),
                ('method', models.CharField(blank=True, help_text='HTTP method used', max_length=10)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string')),
                ('response_status', models.IntegerField(blank=True, help_text='HTTP response status code', null=True)),
                ('response_time', models.FloatField(blank=True, help_text='Response time in milliseconds', null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the action occurred')),
                ('user', models.ForeignKey(help_text='User who performed the action', on_delete=django.db.models.deletion.CASCADE, related_name='tracked_actions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Action',
                'verbose_name_plural': 'User Actions',
                'db_table': 'user_actions',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user'], name='user_action_user_id_3ca348_idx'), models.Index(fields=['action_category'], name='user_action_action__e1a6dd_idx'), models.Index(fields=['timestamp'], name='user_action_timesta_90c280_idx'), models.Index(fields=['ip_address'], name='user_action_ip_addr_83e779_idx'), models.Index(fields=['endpoint'], name='user_action_endpoin_fe0eac_idx')],
            },
        ),
    ]
