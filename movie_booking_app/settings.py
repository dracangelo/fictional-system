"""
Django settings for movie_booking_app project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-q!=rwc!lh$505g1zi*z)vv)xk31^1_3payd2=w^s=m0(c+ju&*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['testserver', 'localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'django_filters',
    'django_celery_beat',
    'django_celery_results',
    'drf_spectacular',
    
    # Local apps
    'movie_booking_app.apps.MovieBookingAppConfig',
    'users',
    'events',
    'theaters',
    'bookings',
    'notifications',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    # Error handling middleware (should be early in the stack)
    'movie_booking_app.error_middleware.HealthCheckMiddleware',
    'movie_booking_app.error_middleware.ErrorHandlingMiddleware',
    'movie_booking_app.error_middleware.SecurityLoggingMiddleware',
    # Security middleware
    'movie_booking_app.security.RateLimitMiddleware',
    'movie_booking_app.security.SecurityHeadersMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Performance and caching middleware
    'movie_booking_app.middleware.PerformanceMonitoringMiddleware',
    'movie_booking_app.middleware.APIResponseCacheMiddleware',
    'movie_booking_app.middleware.CacheInvalidationMiddleware',
    'movie_booking_app.middleware.CompressionMiddleware',
    # Custom middleware for admin functionality
    'users.middleware.AuditLoggingMiddleware',
    'users.middleware.ContentModerationMiddleware',
]

ROOT_URLCONF = 'movie_booking_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'movie_booking_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'OPTIONS': {
            'timeout': 20,
            'check_same_thread': False,
        },
        'CONN_MAX_AGE': 600,  # Connection pooling for 10 minutes
    }
}

# Database Performance Settings
DATABASE_ROUTERS = []

# Comprehensive Logging Configuration
from movie_booking_app.logging_config import get_logging_config

LOGGING = get_logging_config(BASE_DIR, DEBUG)


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_THROTTLE_CLASSES': [
        'movie_booking_app.security.CustomUserRateThrottle',
        'movie_booking_app.security.CustomAnonRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '100/min',
        'anon': '20/min',
        'login': '5/min',
        'booking': '20/min',
    },
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'EXCEPTION_HANDLER': 'movie_booking_app.exceptions.custom_exception_handler',
}

# JWT Configuration
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
}

# CORS Configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:3001",
    "http://127.0.0.1:3001",
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False  # Explicitly set to False for security

# Additional CORS security settings
CORS_ALLOWED_ORIGIN_REGEXES = []
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CORS_EXPOSE_HEADERS = [
    'content-type',
    'x-ratelimit-remaining',
    'x-ratelimit-limit',
]

# User Roles
USER_ROLES = [
    ('admin', 'Administrator'),
    ('event_owner', 'Event Owner'),
    ('theater_owner', 'Theater Owner'),
    ('customer', 'Customer'),
]

# Stripe Configuration
STRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY', default='')
STRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY', default='')
STRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET', default='')

# Payment Configuration
PAYMENT_PROCESSING_FEE_RATE = 0.03  # 3% processing fee
PAYMENT_RETRY_ATTEMPTS = 3
PAYMENT_RETRY_DELAY = 1  # seconds

# Redis Configuration
REDIS_URL = config('REDIS_URL', default='redis://localhost:6379')

# Cache Configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'default-cache',
        'TIMEOUT': 300,  # 5 minutes default timeout
    },
    'sessions': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'sessions-cache',
        'TIMEOUT': 86400,  # 24 hours for sessions
    },
    'api_cache': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'api-cache',
        'TIMEOUT': 600,  # 10 minutes for API responses
    }
}

# Session Configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'sessions'

# Cache Settings
CACHE_TIMEOUT = {
    'events_list': 300,      # 5 minutes
    'event_detail': 600,     # 10 minutes
    'theaters_list': 1800,   # 30 minutes
    'theater_detail': 3600,  # 1 hour
    'movies_list': 3600,     # 1 hour
    'movie_detail': 7200,    # 2 hours
    'showtimes': 300,        # 5 minutes
    'analytics': 900,        # 15 minutes
    'search_results': 600,   # 10 minutes
}

# Celery Configuration
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Email Configuration
EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@moviebooking.com')

# SMS Configuration (Twilio)
TWILIO_ACCOUNT_SID = config('TWILIO_ACCOUNT_SID', default='')
TWILIO_AUTH_TOKEN = config('TWILIO_AUTH_TOKEN', default='')
TWILIO_PHONE_NUMBER = config('TWILIO_PHONE_NUMBER', default='')

# Notification Settings
NOTIFICATION_SETTINGS = {
    'BOOKING_CONFIRMATION': {
        'email': True,
        'sms': True,
    },
    'BOOKING_REMINDER': {
        'email': True,
        'sms': True,
        'hours_before': [24, 2],  # Send reminders 24 hours and 2 hours before
    },
    'BOOKING_CANCELLATION': {
        'email': True,
        'sms': False,
    },
    'EVENT_UPDATE': {
        'email': True,
        'sms': False,
    },
    'SYSTEM_MAINTENANCE': {
        'email': True,
        'sms': False,
    },
}

# Security Settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Session Security
SESSION_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 3600  # 1 hour

# CSRF Security
CSRF_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_USE_SESSIONS = True

# File Upload Security
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
FILE_UPLOAD_PERMISSIONS = 0o644

# Allowed file types for uploads
ALLOWED_FILE_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.gif', '.pdf', '.mp4', '.mov', '.avi']
ALLOWED_MIME_TYPES = [
    'image/jpeg', 'image/png', 'image/gif',
    'application/pdf',
    'video/mp4', 'video/quicktime', 'video/x-msvideo'
]

# Security Logging
SECURITY_LOG_LEVEL = 'WARNING'
SECURITY_LOG_FILE = 'security.log'

# Rate Limiting Settings
RATE_LIMIT_ENABLE = True
RATE_LIMIT_CACHE = 'default'

# Input Validation Settings
MAX_STRING_LENGTH = 1000
MAX_JSON_FIELD_SIZE = 10000
ENABLE_HTML_SANITIZATION = True

# DRF Spectacular Configuration for API Documentation
SPECTACULAR_SETTINGS = {
    'TITLE': 'Movie & Event Booking API',
    'DESCRIPTION': '''
    A comprehensive platform for booking movies and events with multi-tenant support.
    
    ## Features
    - **Multi-role Authentication**: Admin, Event Owner, Theater Owner, Customer roles
    - **Event Management**: Create and manage events with ticketing and discounts
    - **Theater Management**: Manage theaters, movies, and showtimes
    - **Booking System**: Real-time seat selection and booking with payment processing
    - **Notifications**: Email and SMS notifications for bookings and updates
    - **Analytics**: Comprehensive reporting and analytics for business insights
    
    ## Authentication
    This API uses JWT (JSON Web Token) authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Rate Limiting
    - Authenticated users: 100 requests/minute
    - Anonymous users: 20 requests/minute
    - Login attempts: 5 requests/minute
    - Booking operations: 20 requests/minute
    
    ## Versioning
    Current API version: v1
    Future versions will be available at `/api/v2/`, `/api/v3/`, etc.
    ''',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
        'filter': True,
        'tryItOutEnabled': True,
        'supportedSubmitMethods': ['get', 'post', 'put', 'patch', 'delete'],
    },
    'REDOC_UI_SETTINGS': {
        'hideDownloadButton': False,
        'expandResponses': 'all',
        'pathInMiddlePanel': True,
        'theme': {
            'colors': {
                'primary': {
                    'main': '#1976d2'
                }
            }
        }
    },
    'COMPONENT_SPLIT_REQUEST': True,
    'SORT_OPERATIONS': False,
    'ENUM_NAME_OVERRIDES': {
        'ValidationErrorEnum': 'drf_spectacular.plumbing.ValidationErrorEnum.choices',
    },

    'PREPROCESSING_HOOKS': [
        'movie_booking_app.api_docs.preprocessing_hooks.custom_preprocessing_hook'
    ],
    'POSTPROCESSING_HOOKS': [
        'movie_booking_app.api_docs.preprocessing_hooks.custom_postprocessing_hook'
    ],
    'SCHEMA_PATH_PREFIX': '/api/',
    'SCHEMA_PATH_PREFIX_TRIM': True,
    'SERVERS': [
        {
            'url': 'http://localhost:8000',
            'description': 'Development server'
        },
        {
            'url': 'https://api.moviebooking.com',
            'description': 'Production server'
        }
    ],
    'TAGS': [
        {
            'name': 'Authentication',
            'description': 'User authentication and authorization endpoints'
        },
        {
            'name': 'Events',
            'description': 'Event management and discovery endpoints'
        },
        {
            'name': 'Theaters',
            'description': 'Theater and movie management endpoints'
        },
        {
            'name': 'Bookings',
            'description': 'Booking creation and management endpoints'
        },
        {
            'name': 'Notifications',
            'description': 'Notification preferences and management endpoints'
        },
        {
            'name': 'Analytics',
            'description': 'Analytics and reporting endpoints'
        },
        {
            'name': 'Admin',
            'description': 'Administrative endpoints for system management'
        }
    ],
    'EXTERNAL_DOCS': {
        'description': 'API Integration Guide',
        'url': 'https://docs.moviebooking.com/integration/'
    }
}
