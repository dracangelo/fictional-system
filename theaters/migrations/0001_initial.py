# Generated by Django 5.2.7 on 2025-10-10 14:17

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Movie title', max_length=200)),
                ('description', models.TextField(help_text='Movie plot/description')),
                ('genre', models.CharField(choices=[('action', 'Action'), ('adventure', 'Adventure'), ('animation', 'Animation'), ('comedy', 'Comedy'), ('crime', 'Crime'), ('documentary', 'Documentary'), ('drama', 'Drama'), ('family', 'Family'), ('fantasy', 'Fantasy'), ('horror', 'Horror'), ('musical', 'Musical'), ('mystery', 'Mystery'), ('romance', 'Romance'), ('sci-fi', 'Science Fiction'), ('thriller', 'Thriller'), ('war', 'War'), ('western', 'Western')], help_text='Primary movie genre', max_length=50)),
                ('duration', models.PositiveIntegerField(help_text='Movie duration in minutes', validators=[django.core.validators.MinValueValidator(1)])),
                ('rating', models.CharField(choices=[('G', 'General Audiences'), ('PG', 'Parental Guidance'), ('PG-13', 'Parents Strongly Cautioned'), ('R', 'Restricted'), ('NC-17', 'Adults Only'), ('NR', 'Not Rated')], default='NR', help_text='Movie rating', max_length=10)),
                ('cast', models.JSONField(blank=True, default=list, help_text='List of main cast members')),
                ('director', models.CharField(help_text='Movie director', max_length=100)),
                ('producer', models.CharField(blank=True, help_text='Movie producer', max_length=100)),
                ('poster_url', models.URLField(blank=True, help_text='Movie poster URL')),
                ('trailer_url', models.URLField(blank=True, help_text='Movie trailer URL')),
                ('release_date', models.DateField(help_text='Movie release date')),
                ('language', models.CharField(default='English', help_text='Primary language', max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the movie is available for scheduling')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Movie',
                'verbose_name_plural': 'Movies',
                'db_table': 'movies',
                'ordering': ['title'],
                'indexes': [models.Index(fields=['title'], name='movies_title_179e04_idx'), models.Index(fields=['genre'], name='movies_genre_66f117_idx'), models.Index(fields=['rating'], name='movies_rating_59f5e6_idx'), models.Index(fields=['release_date'], name='movies_release_e1d0b4_idx'), models.Index(fields=['is_active'], name='movies_is_acti_b4a45a_idx')],
            },
        ),
        migrations.CreateModel(
            name='Theater',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Theater name', max_length=200)),
                ('address', models.TextField(help_text='Full theater address')),
                ('city', models.CharField(help_text='City', max_length=100)),
                ('state', models.CharField(help_text='State/Province', max_length=100)),
                ('zip_code', models.CharField(help_text='ZIP/Postal code', max_length=20)),
                ('phone_number', models.CharField(blank=True, help_text='Contact phone number', max_length=20)),
                ('screens', models.PositiveIntegerField(default=1, help_text='Number of screens in the theater', validators=[django.core.validators.MinValueValidator(1)])),
                ('seating_layout', models.JSONField(default=dict, help_text='Seating configuration for each screen')),
                ('amenities', models.JSONField(blank=True, default=list, help_text='List of theater amenities')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the theater is active and operational')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(help_text='Theater owner (must have theater_owner role)', on_delete=django.db.models.deletion.CASCADE, related_name='owned_theaters', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Theater',
                'verbose_name_plural': 'Theaters',
                'db_table': 'theaters',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Showtime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('screen_number', models.PositiveIntegerField(help_text='Screen number within the theater', validators=[django.core.validators.MinValueValidator(1)])),
                ('start_time', models.DateTimeField(help_text='Showtime start date and time')),
                ('end_time', models.DateTimeField(help_text='Showtime end date and time')),
                ('base_price', models.DecimalField(decimal_places=2, help_text='Base ticket price for this showtime', max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('seat_pricing', models.JSONField(blank=True, default=dict, help_text='Pricing for different seat categories')),
                ('total_seats', models.PositiveIntegerField(help_text='Total number of seats available for this showtime')),
                ('available_seats', models.PositiveIntegerField(help_text='Number of seats currently available')),
                ('booked_seats', models.JSONField(default=list, help_text='List of booked seat identifiers')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this showtime is available for booking')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('movie', models.ForeignKey(help_text='Movie being shown', on_delete=django.db.models.deletion.CASCADE, related_name='showtimes', to='theaters.movie')),
                ('theater', models.ForeignKey(help_text='Theater where the movie is shown', on_delete=django.db.models.deletion.CASCADE, related_name='showtimes', to='theaters.theater')),
            ],
            options={
                'verbose_name': 'Showtime',
                'verbose_name_plural': 'Showtimes',
                'db_table': 'showtimes',
                'ordering': ['start_time'],
            },
        ),
        migrations.AddIndex(
            model_name='theater',
            index=models.Index(fields=['owner'], name='theaters_owner_i_faebbf_idx'),
        ),
        migrations.AddIndex(
            model_name='theater',
            index=models.Index(fields=['city'], name='theaters_city_7aa508_idx'),
        ),
        migrations.AddIndex(
            model_name='theater',
            index=models.Index(fields=['is_active'], name='theaters_is_acti_5f012f_idx'),
        ),
        migrations.AddIndex(
            model_name='theater',
            index=models.Index(fields=['name'], name='theaters_name_f6673a_idx'),
        ),
        migrations.AddIndex(
            model_name='showtime',
            index=models.Index(fields=['theater'], name='showtimes_theater_65c558_idx'),
        ),
        migrations.AddIndex(
            model_name='showtime',
            index=models.Index(fields=['movie'], name='showtimes_movie_i_073b26_idx'),
        ),
        migrations.AddIndex(
            model_name='showtime',
            index=models.Index(fields=['start_time'], name='showtimes_start_t_6fc948_idx'),
        ),
        migrations.AddIndex(
            model_name='showtime',
            index=models.Index(fields=['screen_number'], name='showtimes_screen__3eddb8_idx'),
        ),
        migrations.AddIndex(
            model_name='showtime',
            index=models.Index(fields=['is_active'], name='showtimes_is_acti_b69f93_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='showtime',
            unique_together={('theater', 'screen_number', 'start_time')},
        ),
    ]
